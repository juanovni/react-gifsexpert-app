{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","console","log","type","value","onChange","target","protoTypes","PropTypes","func","isRequired","GifGridItem","id","title","image","className","src","alt","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gif","map","img","images","downsized_large","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"oNAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEVC,mBAAS,IAFC,mBAExCC,EAFwC,KAE5BC,EAF4B,KAqBhD,OACI,sBAAMC,SAbW,SAAEC,GACnBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAG,OAAOP,GAAP,mBAAsBO,OACxCN,EAAc,KAIlBO,QAAQC,IAAI,SAIZ,SACI,uBACIC,KAAK,OACLC,MAAQX,EACRY,SArBc,SAAET,GACxBF,EAAeE,EAAEU,OAAOF,aA2BhCd,EAAYiB,WAAW,CACnBhB,cAAeiB,IAAUC,KAAKC,Y,YCnCrBC,EAAc,SAAC,GAA2B,EAAxBC,GAAyB,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,MACtC,OACI,sBAAKC,UAAU,2DAAf,UACI,qBAAKC,IAAMF,EAAQG,IAAMJ,IACzB,8BAAKA,EAAL,W,uBCJCK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACTC,EADS,iDACyCC,UAAWH,GADpD,+DAEII,MAAOF,GAFX,cAETG,EAFS,gBAGQA,EAAKC,OAHb,uBAGPC,EAHO,EAGPA,KAEFC,EAAMD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHjB,GAAIiB,EAAIjB,GACRC,MAAOgB,EAAIhB,MACXC,MAAK,UAAEe,EAAIC,cAAN,aAAE,EAAYC,gBAAgBV,QAT5B,kBAcPM,GAdO,4CAAH,sDCKPK,EAAU,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAAe,ECJb,SAAGA,GAAe,IAAD,EAEf3B,mBAAS,CAC/BkC,KAAM,GACNO,SAAS,IAJ4B,mBAElCC,EAFkC,KAE3BC,EAF2B,KAkBzC,OAXAC,qBAAW,WAEPlB,EAASC,GACJkB,MAAM,SAAAC,GACHH,EAAS,CACLT,KAAMY,EACNL,SAAS,SAGtB,CAAEd,IAEEe,EDL0BK,CAAcpB,GAAlCW,EATwB,EAS7BJ,KAAaO,EATgB,EAShBA,QAErB,OACI,qCACI,oBAAIlB,UAAU,oCAAd,SAAoDI,IAElDc,GAAW,mBAAGlB,UAAU,mCAAb,2BAEb,qBAAKA,UAAU,YAAf,SAEQe,EAAOF,KAAM,SAAAC,GAAG,OACZ,cAAC,EAAD,eAEQA,GADEA,EAAIjB,aEWvB4B,EAnCM,WAAM,MAGehD,mBAAS,CAAC,cAHzB,mBAGfiD,EAHe,KAGHlD,EAHG,KAavB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAGA,6BAEIkD,EAAWb,KAAK,SAAET,GAAF,OACZ,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCtB9BuB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b0b6ba15.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n    \r\n    const [ inputValue, setInputValue ] = useState('');\r\n\r\n    // IT'S FUNCTION TO GET THE VALUE\r\n    const handleInputChange = ( e ) => {\r\n        setInputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = ( e ) => {\r\n        e.preventDefault();\r\n        // funcion callback que sirve para no enviar el valor original del arreglo si no de manera implicita se envia\r\n        if ( inputValue.trim().length > 2 ) {\r\n            setCategories( cat => [  inputValue, ...cat ]);\r\n            setInputValue('');\r\n        }\r\n        \r\n        \r\n        console.log(\"Done\");\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input\r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\n// VALIDAR VARIABLES\r\nAddCategory.protoTypes={\r\n    setCategories: PropTypes.func.isRequired\r\n}","import React from 'react';\r\n\r\nexport const GifGridItem = ( { id, title, image } ) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn animate__delay-1s\">\r\n            <img src={ image } alt={ title }></img>\r\n            <p>{ title} </p>\r\n        </div>\r\n    )\r\n}\r\n","\r\n\r\nexport const getGifs = async( category ) => {\r\n        const url  = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category )}&limit=10&api_key=JPZ4ymIWI23849USvXGYaoaxk5zfZuv4`;\r\n        const resp = await fetch( url );\r\n        const { data } = await resp.json();\r\n        \r\n        const gif = data.map( img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                image: img.images?.downsized_large.url\r\n            }\r\n        }) \r\n        \r\n        \r\n        return( gif );\r\n\r\n    }","/* import React, { useState, useEffect } from 'react'; */\r\n/* import { getGifs } from '../helpers/getGifs'; */\r\nimport React from 'react';\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    // SE VA A MOVER A UN HOOKS\r\n    /* const [gif, setGif] = useState([]);\r\n    // ejcuta codigo con un argumento de tipo arrar [] como parametro para ejecutarlo segun la peticion y renderizar\r\n    useEffect(() => {\r\n        getGifs( category )\r\n            .then( imgs =>  setGif( imgs ))\r\n    }, [ category ])  */\r\n    \r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\r\n            \r\n            { loading && <p className=\"animate__animated animate__flash\">'Cargando...'</p>}\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map(  img  => (\r\n                        <GifGridItem\r\n                            key={ img.id }\r\n                            {...img} \r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (  category ) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect( () => {\r\n        \r\n        getGifs( category )\r\n            .then( imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            })\r\n    }, [ category ])\r\n\r\n    return state;\r\n}\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    //const categories = ['Goky', 'Simpsons', 'Naruto'];\r\n    const [ categories, setCategories ] = useState(['One Punch']);\r\n\r\n    /* const handleAddCategory = () => {\r\n        // FIRT FORM\r\n        //setCategories( [ 'Two and hald men', ...categories,]);\r\n        // SECOND WITH A CALLBACK FUNCTION\r\n        setCategories( cat => [ ...cat , 'Prueba']);\r\n    } */\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr />\r\n            {/* <button onClick={ handleAddCategory }>Add Category</button> */}\r\n\r\n            <ol>\r\n               { \r\n                categories.map( ( category ) => (\r\n                    <GifGrid \r\n                        key={ category }\r\n                        category={ category } \r\n                    />\r\n                ))\r\n            } \r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}